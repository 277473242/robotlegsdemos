<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas width="100%"
		   height="100%"
		   xmlns:mx="http://www.adobe.com/2006/mxml">

	<mx:Accordion width="100%"
				  height="100%">

		<mx:Canvas label="Welcome"
				   width="100%"
				   height="100%">
			<mx:Image id="logo"
					  verticalCenter="0"
					  horizontalCenter="0"
					  source="../assets/RobotLegsLogoSmallWeb.png"/>
		</mx:Canvas>

		<mx:Canvas label="Introduction"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs is an event driven MVCS micro-architecture for Flash and Flex applications. It is inspired by the excellent PureMVC framework, but relies on Dependency Injection and provides automatic Mediator registration for View Components.&#xd;&#xd;Whilst RobotLegs is very similar to PureMVC conceptually, there are some key differences. Nevertheless, it is pretty easy to convert a PureMVC application over to RobotLegs.&#xd;&#xd;Currently, RobotLegs makes use of SmartyPantsIOC - an AS3 Dependency Injection framework for Flash and Flex.&#xd;&#xd;No casting! No fetching! No Singletons!"
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Dependency Injection"
				   width="100%"
				   height="100%">
			<mx:Text text="Dependencies are declared as public properties with an [Inject] annotation.&#xd;&#xd;Rules for dependency injection are configured in a single Injector that is shared between all RobotLegs Actors in a particular Context."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Facade and Context"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs does not make use of the Facade design pattern - instead there is something known as a Context. It's not really the same thing, and is only used to bootstrap your application.&#xd;&#xd;Typically, when starting a new project, you extend the default Context and override the startup() method.&#xd;&#xd;Inside the startup() method you bind a couple of Commands to a startup event and then dispatch that event.&#xd;&#xd;By default, a Context will auto-Start when it's View Compontent is added to the Stage."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Mediators"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs makes it easy to work with deeply-nested, lazily-instantiated View Components.&#xd;&#xd;You map Mediator classes to View Component classes during startup, and RobotLegs creates and registers Mediator instances automatically as View Components arrive on the stage.&#xd;&#xd;A Mediator is only ready to be interacted with when it's onRegister method gets called. This is where you should register your listeners.&#xd;&#xd;The default Mediator implementation provides a handy utility method called addEventListenerTo(). You should use this method to register listeners in your Mediator. Doing so allows RobotLegs to automatically remove any listeners when a Mediator gets removed."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="Commands"
				   width="100%"
				   height="100%">
			<mx:Text text="RobotLegs make use of native Flash Player events for framework communication. Much like PureMVC, Commands can be bound to events.&#xd;&#xd;No parameters are passed to a Command's execute method however. Instead, you define the concrete event that will be passed to the Command as a dependency. This relieves you from having to cast the event.&#xd;&#xd;Multiple Commands can be bound to an event type. They will be executed in the order that they were mapped."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

		<mx:Canvas label="EventBroadcasters and EventDispatchers"
				   width="100%"
				   height="100%">
			<mx:Text text="EventBroadcasters are like EventDispatchers, but can only dispatch events.&#xd;&#xd;Commands, along with Services and Proxies, get injected with the Context's EventBroadcaster after construction. This is because these actors should only dispatch events: listening for events would couple them too tightly to a particular Context.&#xd;&#xd;Mediators, however, get injected with the Context's EventDispatcher, as they can dispatch and listen for events."
					 x="10"
					 y="10"
					 width="90%"
					 selectable="false"/>
		</mx:Canvas>

	</mx:Accordion>

</mx:Canvas>
